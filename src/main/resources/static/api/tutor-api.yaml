openapi: 3.0.3
info:
  title: Tutor backend API
  version: 1.0.0
servers:
  - url: https://tutor-backend-k28m.onrender.com
paths:
  /api/v1/student/registration:
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  title: new username for registered user. Should be unique
                  nullable: false
                  example: Mykola
                  maxLength: 15
                  minLength: 4
                email:
                  type: string
                  title: user's email. Should be unique
                  format: email
                  nullable: false
                  example: mykolacool@gmail.com
                password:
                  type: string
                  title: password for registered user
                  nullable: false
                  example: some password
                  maxLength: 15
                  minLength: 8
                form:
                  type: string
                  title: form in school
                  nullable: false
                  enum:
                    - FIRST
                    - SECOND
                    - THIRD
                    - FOURTH
                    - FIFTH
                    - SIXTH
                    - SEVENTH
                    - EIGHTH
                    - NINTH
                    - TENTH
                    - ELEVENTH
                    - TWELFTH
                  example: ELEVENTH
                age:
                  type: number
                  title: user's age
                  nullable: false
                  example: 18
      responses:
        '201':
          description: successfully registered new user but needs to be verified. So you need create new http request for verification email
        '400':
          description: When user typed email/username that already exists in database
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    title: explanation of exception
                    nullable: false
                    example: Email/username already exists
  /api/v1/email/send-verification:
    get:
      parameters:
        - name: email
          in: query
          description: The email to which the verification message is to be sent
          required: true
      responses:
        '200':
          description: Message sent
  /api/v1/authentication/login:
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                usernameOrEmail:
                  type: string
                password:
                  type: string
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
          description: when credentials valid
          headers:
            Set-Cookie:
              description: Refresh token cookie
              schema:
                type: string
                example: "cookieName=refreshToken; HttpOnly"
        '400':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  timestamp:
                    type: string
          description: when username or email doesn't exist
        '401':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  timestamp:
                    type: string
          description: when password is invalid or user email has not confirmed yet
        '403':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  timestamp:
                    type: string
          description: when user is banned
  /api/v1/authentication/logout:
    post:
      parameters:
        - name: refreshToken
          in: cookie
          required: true
          schema:
            type: string
          description: The refresh token
      responses:
        '200':
          description: user's refreshToken deleted from db. But you need to delete jwt in frontend-side
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  timestamp:
                    type: string
          description: when refreshToken invalid
  /api/v1/authentication/refresh:
    post:
      parameters:
        - name: refreshToken
          in: cookie
          required: true
          schema:
            type: string
          description: The refresh token
      responses:
        '200':
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
          description: when credentials valid
          headers:
            Set-Cookie:
              description: Refresh token cookie
              schema:
                type: string
                example: "cookieName=refreshToken; HttpOnly"
        '404':
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  timestamp:
                    type: string
          description: when refreshToken invalid
  /api/v1/forgot-password:
    patch:
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                password:
                  type: string
      responses:
        200:
          description: password successfully changed
        400:
          description: new and old password is equal
  /api/v1/report:
    post:
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                reportReason:
                  type: string
                  enum:
                    - SPAM
                    - VIOLENCE
                    - SEXUAL_CONTENT
                    - PERSONAL_ATTACK
                    - HATE_SPEECH
                    - FALSE_INFORMATION
                    - OTHER
                content:
                  type: string
                date:
                  type: string
      responses:
        '200':
          description: report successfully sent
        '400':
          description: wrong datatype provided
  /api/v1/lectures/ukr_mova/theme:
    get:
      parameters:
        - name: themeName
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: return content of lecture by theme
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    theme_name_ukr:
                      type: string
                    lection:
                      type: array
                      items:
                        type: object
                        properties:
                          text:
                            type: string
                          table:
                            type: object
                            properties:
                              name:
                                type: string
                              content:
                                type: string
                          prepared_question:
                            type: array
                            items:
                              type: object
                              properties:
                                question:
                                  type: string
                                answer:
                                  type: string
                    test_your_knowledge:
                      type: array
                      items:
                        type: object
                        properties:
                          question:
                            type: string
                          answers:
                            type: array
                            items:
                              type: string
                          correct_answer:
                            type: string
        '404':
          description: when theme doesn't exist
  /api/v1/lectures/ukr_mova/themes:
    get:
      parameters:
        - name: subject
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: return all themes by subject (ukr_mova, math, english)
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: array
                      items:
                        type: string
                    lectures:
                      type: array
                      items:
                        type: object
                        properties:
                          theme_names:
                            type: array
                            items:
                              type: string
                    points:
                      type: array
                      items:
                        type: number
        '404':
          description: when subject doesn't exist
  /api/v1/lectures/ukr_mova/global_theme:
    get:
      parameters:
        - name: globalName
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: return data about global theme
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: array
                    items:
                      type: string
                  content:
                    type: array
                    items:
                      type: object
                      properties:
                        lectures:
                          type: array
                          items:
                            type: object
                            properties:
                              theme_names:
                                type: array
                                items:
                                  type: string
                        practices:
                          type: array
                          items:
                            type: object
                            properties:
                              practice_name:
                                type: array
                                items:
                                  type: string
                  points:
                    type: array
                    items:
                      type: number
        '404':
          description: when theme doesn't exist
  /api/v1/practice/ukr_mova/lexicology/{topic}:
    get:
      summary: "GET api/v1/practice/ukr_mova/lexicology/{topic}"
      operationId: "getLexicologyTestsByTopic"
      parameters:
        - name: "topic"
          in: "path"
          required: true
          schema:
            type: "string"
        - name: "page"
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: "0"
        - name: "size"
          in: "query"
          required: false
          schema:
            type: "integer"
            format: "int32"
            default: "10"
      responses:
        "200":
          description: "OK"
          content:
            '*/*':
              schema:
                type: "array"
                example: [
                  {
                    "question": "Лексичну помилку допущено в рядку",
                    "correct": [
                      "бувший директор"
                    ],
                    "wrong": [
                      "автобус на замовлення",
                      "вимкнути електрику",
                      "образив мимоволі"
                    ],
                    "id": 0
                  }
                ]
  /api/v1/points/put:
    post:
      summary: "Add points to a specific theme for a student"
      operationId: "putPointsToDB"
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accessToken:
                  type: string
                  description: "The access token of the student"
                themeName:
                  type: string
                  description: "The name of the theme"
                points:
                  type: integer
                  description: "The points to be added"
                subjectName:
                  type: string
                  description: "The name of the subject"
              required:
                - accessToken
                - themeName
                - points
                - subjectName
      responses:
        '200':
          description: "Points successfully added to the database"
        '400':
          description: "Bad request. The request body is invalid"
        '404':
          description: "Not found. The specified theme or subject does not exist"
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    description: "The error message"
                  timestamp:
                    type: string
                    description: "The timestamp when the error occurred"
