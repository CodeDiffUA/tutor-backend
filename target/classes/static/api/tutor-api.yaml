openapi: 3.0.3
info:
  title: Tutor backend API
  version: 1.0.0
servers:
  - url: https://tutor-backend-k28m.onrender.com
paths:
  /api/v1/student/registration:
    post:
      summary: "POST api/v1/student/registration"
      operationId: "registerStudent"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  title: new username for registered user. Should be unique
                  nullable: false
                  example: Mykola
                  maxLength: 15
                  minLength: 4
                email:
                  type: string
                  title: user's email. Should be unique
                  format: email
                  nullable: false
                  example: mykolacool@gmail.com
                password:
                  type: string
                  title: password for registered user
                  nullable: false
                  example: some password
                  maxLength: 15
                  minLength: 8
                form:
                  type: string
                  title: form in school
                  nullable: false
                  enum:
                    - FIRST
                    - SECOND
                    - THIRD
                    - FOURTH
                    - FIFTH
                    - SIXTH
                    - SEVENTH
                    - EIGHTH
                    - NINTH
                    - TENTH
                    - ELEVENTH
                    - TWELFTH
                  example: ELEVENTH
                age:
                  type: number
                  title: user's age
                  nullable: false
                  example: 18
      responses:
        '201':
          description: successfully registered new user but needs to be verified. So you need to create a new HTTP request for verification email
        '400':
          description: When user typed email/username that already exists in the database
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    title: explanation of exception
                    nullable: false
                    example: Email/username already exists
  /api/v1/email/send-verification:
    get:
      summary: "GET api/v1/email/send-verification"
      operationId: "sendVerificationEmail"
      parameters:
        - name: email
          in: query
          description: The email to which the verification message is to be sent
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Message sent
  /api/v1/authentication/login:
    post:
      summary: "POST api/v1/authentication/login"
      operationId: "login"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                usernameOrEmail:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: when credentials are valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
          headers:
            Set-Cookie:
              description: Refresh token cookie
              schema:
                type: string
                example: "cookieName=refreshToken; HttpOnly"
        '400':
          description: when username or email doesn't exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  timestamp:
                    type: string
        '401':
          description: when the password is invalid or user email has not been confirmed yet
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  timestamp:
                    type: string
        '403':
          description: when the user is banned
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  timestamp:
                    type: string
  /api/v1/authentication/logout:
    post:
      summary: "POST api/v1/authentication/logout"
      operationId: "logout"
      parameters:
        - name: refreshToken
          in: cookie
          required: true
          schema:
            type: string
          description: The refresh token
      responses:
        '200':
          description: user's refresh token deleted from the database. But you need to delete JWT on the frontend side
        '404':
          description: when refresh token is invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  timestamp:
                    type: string
  /api/v1/authentication/refresh:
    post:
      summary: "POST api/v1/authentication/refresh"
      operationId: "refreshToken"
      parameters:
        - name: refreshToken
          in: cookie
          required: true
          schema:
            type: string
          description: The refresh token
      responses:
        '200':
          description: when credentials are valid
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
          headers:
            Set-Cookie:
              description: Refresh token cookie
              schema:
                type: string
                example: "cookieName=refreshToken; HttpOnly"
        '404':
          description: when refresh token is invalid
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                  timestamp:
                    type: string
  /api/v1/forgot-password:
    patch:
      summary: "PATCH api/v1/forgot-password"
      operationId: "forgotPassword"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                token:
                  type: string
                password:
                  type: string
      responses:
        '200':
          description: password successfully changed
        '400':
          description: new and old passwords are equal
  /api/v1/report:
    post:
      summary: "POST api/v1/report"
      operationId: "reportUser"
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                reportReason:
                  type: string
                  enum:
                    - SPAM
                    - VIOLENCE
                    - SEXUAL_CONTENT
                    - PERSONAL_ATTACK
                    - HATE_SPEECH
                    - FALSE_INFORMATION
                    - OTHER
                content:
                  type: string
                date:
                  type: string
      responses:
        '200':
          description: report successfully sent
        '400':
          description: wrong data type provided
  /api/v1/lectures/ukr_mova/theme:
    get:
      summary: "GET api/v1/lectures/ukr_mova/theme"
      operationId: "getLectureByTheme"
      parameters:
        - name: themeName
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: return content of lecture by theme
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    theme_name_ukr:
                      type: string
                    lection:
                      type: array
                      items:
                        type: object
                        properties:
                          text:
                            type: string
                          table:
                            type: object
                            properties:
                              name:
                                type: string
                              content:
                                type: string
                          prepared_question:
                            type: array
                            items:
                              type: object
                              properties:
                                question:
                                  type: string
                                answer:
                                  type: string
                    test_your_knowledge:
                      type: array
                      items:
                        type: object
                        properties:
                          question:
                            type: string
                          answers:
                            type: array
                            items:
                              type: string
                          correct_answer:
                            type: string
        '404':
          description: when theme doesn't exist
  /api/v1/lectures/ukr_mova/themes:
    get:
      summary: "GET api/v1/lectures/ukr_mova/themes"
      operationId: "getThemesBySubject"
      parameters:
        - name: subject
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: return all themes by subject (ukr_mova, math, english)
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    name:
                      type: array
                      items:
                        type: string
                    lectures:
                      type: array
                      items:
                        type: object
                        properties:
                          theme_names:
                            type: array
                            items:
                              type: string
                    points:
                      type: array
                      items:
                        type: number
        '404':
          description: when subject doesn't exist
  /api/v1/lectures/ukr_mova/global_theme:
    get:
      summary: "GET api/v1/lectures/ukr_mova/global_theme"
      operationId: "getGlobalTheme"
      parameters:
        - name: globalName
          in: query
          required: true
          schema:
            type: string
      responses:
        '200':
          description: return data about global theme
          content:
            application/json:
              schema:
                type: object
                properties:
                  name:
                    type: array
                    items:
                      type: string
                  content:
                    type: array
                    items:
                      type: object
                      properties:
                        lectures:
                          type: array
                          items:
                            type: object
                            properties:
                              theme_names:
                                type: array
                                items:
                                  type: string
                        practices:
                          type: array
                          items:
                            type: object
                            properties:
                              practice_name:
                                type: array
                                items:
                                  type: string
                  points:
                    type: array
                    items:
                      type: number
        '404':
          description: when theme doesn't exist
  /api/v1/practice/ukr_mova/{globalTopic}/{topic}:
    get:
      summary: "GET api/v1/practice/ukr_mova/{globalTopic}/{topic}"
      operationId: "getPracticeByTopic"
      parameters:
        - name: globalTopic
          in: path
          required: true
          schema:
            type: string
        - name: topic
          in: path
          required: true
          schema:
            type: string
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    question:
                      type: string
                    correct:
                      type: array
                      items:
                        type: string
                    wrong:
                      type: array
                      items:
                        type: string
                    id:
                      type: integer
                      example: 0
  /api/v1/ai/chat:
    get:
      summary: "GET api/v1/ai/chat"
      description: request to get history of chat messages
      operationId: "getChatMessagesById"
      parameters:
        - name: chatId
          in: query
          required: true
          schema:
            type: integer
            format: int32
        - name: size
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: page
          in: query
          required: false
          schema:
            type: integer
            format: int32
            default: 0
      responses:
        '200':
          description: returns an array of messages for specific chat
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    role:
                      type: string
                      example: user
                    content:
                      type: string
                      example: hello
        "404":
          description: chat not found
    post:
      summary: "POST api/v1/ai/chat"
      operationId: "createChat"
      description: creates a chat for a user
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateAiChatRequestDto"
        required: true
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AiChatResponseDto"
        "404":
          description: chat not found or accessToken invalid
    patch:
      summary: "PATCH api/v1/ai/chat"
      operationId: "changeChatName"
      description: changes chat's name
      parameters:
        - name: "chatId"
          in: "query"
          required: true
          schema:
            type: "integer"
            format: "int64"
        - name: "chatName"
          in: "query"
          required: true
          schema:
            type: "string"
      responses:
        "200":
          description: changed chat name
        "404":
          description: chat not found
    delete:
      summary: "DELETE api/v1/ai/chat"
      operationId: "deleteChatById"
      parameters:
        - name: "chatId"
          in: "query"
          required: true
          schema:
            type: "integer"
            format: "int64"
      responses:
        "200":
          description: "Deleted chat"
        "404":
          description: chat not found
  /api/v1/ai/chat/help:
    post:
      summary: "POST api/v1/ai/chat/help"
      operationId: "requestAi"
      description: request to talk with ai
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                accessToken:
                  type: string
                  example: "your-access-token"
                chatId:
                  type: integer
                  example: 123
                messages:
                  description: whole chat history so chat was in the context
                  type: array
                  items:
                    type: object
                    properties:
                      role:
                        type: string
                        example: user
                      content:
                        type: string
                        example: "Hello, I need help with my homework."
      responses:
        '200':
          description: Request processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  response:
                    type: array
                    items:
                      type: object
                      properties:
                        role:
                          type: string
                          example: ai
                        content:
                          type: string
                          example: "Sure, I'd be happy to help you with your homework."
        '400':
          description: Invalid input
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid request data
  /api/v1/ai/chat/{accessToken}:
    get:
      summary: "GET api/v1/ai/chat/{accessToken}"
      operationId: "getStudentsChats"
      description: loads all user's chats
      parameters:
        - name: "accessToken"
          in: "path"
          required: true
          schema:
            type: "string"
      responses:
        '200':
          description: Request processed successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: success
                  response:
                    type: array
                    items:
                      type: object
                      properties:
                        id:
                          type: int
                          example: 245
                        student:
                          type: string
                          example: bodya4000
                        chatName:
                          type: string
                          example: maths
  /api/v1/ai/chat/{accessToken}/{chatName}:
    get:
      summary: "GET api/v1/ai/chat/{accessToken}/{chatName}"
      operationId: "getChatMessagesByStudentByChatName"
      description: loads all messages in chat
      parameters:
        - name: "accessToken"
          in: "path"
          required: true
          schema:
            type: string
        - name: "chatName"
          in: "path"
          required: true
          schema:
            type: string
        - name: "size"
          in: "query"
          required: false
          schema:
            type: integer
            format: int32
            default: 10
        - name: "page"
          in: "query"
          required: false
          schema:
            type: integer
            format: int32
            default: 0
      responses:
        "200":
          description: "OK"
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    id:
                      type: integer
                      example: 2
                    student:
                      type: string
                      example: bodya4000
                    chatName:
                      type: string
                      example: українська мова
        '400':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid parameters provided
        '404':
          description: Invalid request parameters
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Invalid accessToken or chatID



components:
  schemas:
    CreateAiChatRequestDto:
      type: object
      properties:
        chatName:
          type: string
          example: Maths
        accessToken:
          type: string
          example: eyJhbGciOiJIUzI1NiJ9.eyJyb2xlcyI6WyJST0xFX1NUVURFTlQiXSwic3ViIjoiYm9keWE0MDAwIiwiaWF0IjoxNzE2OTM0NTExLCJleHAiOjE3MTY5MzU3MTF9.flIj6JuJQFpRLeR-vhSbyV8s58na3ufEfwv99MPDuRY
    AiChatResponseDto:
      type: object
      properties:
        id:
          type: integer
          example: 1
        student:
          type: string
          example: bodya4000
        chatName:
          type: string
          example: maths
